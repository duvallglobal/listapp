  version: '3.8'

  # Defines the services (containers) that make up your application
  services:
    # The Nginx service acts as a reverse proxy and entry point to your app
    nginx:
      build:
        context: ./nginx
        dockerfile: Dockerfile
      ports:
        - "80:80"      # Exposes port 80 for HTTP traffic
        - "443:443"    # Exposes port 443 for HTTPS traffic
      volumes:
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf # Mounts the main Nginx config
        - ./nginx/conf.d:/etc/nginx/conf.d         # Mounts site-specific configs
      depends_on:
        - api
        - frontend
      networks:
        - pi_network

    # The Frontend service (React/Vite)
    frontend:
      build:
        context: . # Assumes Dockerfile is in the root directory
        dockerfile: Dockerfile
      ports:
        - "5173:5173" # Exposes Vite's default port for direct access in dev
      volumes:
        - .:/app # Mounts the entire project directory for hot-reloading
      environment:
        # These variables are passed to your Vite app
        - VITE_API_URL=http://localhost/api # The public URL to the backend (via Nginx)
        - VITE_SUPABASE_URL=${SUPABASE_URL}
        - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      depends_on:
        - api
      networks:
        - pi_network

    # The API service (Python/FastAPI Backend)
    api:
      build:
        context: ./api # Path to your backend code and Dockerfile
        dockerfile: Dockerfile
      ports:
        - "8000:8000" # Exposes the API port for direct testing
      volumes:
        - ./api:/app # Mounts the backend source code for hot-reloading
      environment:
        # API Keys for AI and other services
        - GOOGLE_VISION_API_KEY=${GOOGLE_VISION_API_KEY}
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - EBAY_APP_ID=${EBAY_APP_ID}
        # Database connection URL
        - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
        # Redis connection URL
        - REDIS_URL=redis://redis:6379
        # Stripe Credentials
        - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
        - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
        # Supabase Credentials
        - SUPABASE_URL=${SUPABASE_URL}
        - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      depends_on:
        - db
        - redis
      networks:
        - pi_network

    # n8n service for workflow automation
    n8n:
      image: n8nio/n8n
      restart: unless-stopped
      ports:
        - "5678:5678"
      environment:
        - N8N_BASIC_AUTH_ACTIVE=true
        - N8N_BASIC_AUTH_USER=${N8N_USER}
        - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
        # Using Postgres for more robust data storage for n8n
        - DB_TYPE=postgresdb
        - DB_POSTGRESDB_HOST=db
        - DB_POSTGRESDB_PORT=5432
        - DB_POSTGRESDB_DATABASE=${POSTGRES_DB_N8N} # Use a separate DB for n8n
        - DB_POSTGRESDB_USER=${POSTGRES_USER}
        - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      volumes:
        - n8n_data:/home/node/.n8n # Persists n8n data and workflows
      depends_on:
        - db
      networks:
        - pi_network

    # Database service (PostgreSQL)
    db:
      image: postgres:14-alpine
      restart: unless-stopped
      ports:
        - "5432:5432" # Exposes the database port to the host for debugging
      volumes:
        - postgres_data:/var/lib/postgresql/data # Persists database data
        - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql # Runs initialization script
      environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB} # Main DB for your API
      networks:
        - pi_network

    # Caching service (Redis)
    redis:
      image: redis:alpine
      restart: unless-stopped
      ports:
        - "6379:6379" # Exposes Redis port to the host for debugging
      volumes:
        - redis_data:/data # Persists Redis data
      networks:
        - pi_network

  # Defines the network that allows containers to communicate with each other
  networks:
    pi_network:
      driver: bridge

  # Defines named volumes for data persistence
  volumes:
    postgres_data:
    redis_data:
    n8n_data:
